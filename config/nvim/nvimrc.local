" Setup leader, etc.
let mapleader = ','
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader><space> :StripWhitespace<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>t :TagbarToggle<CR>
noremap <silent> <leader>V :source ~/.config/nvim/nvimrc<CR>:filetype detect<CR>:exe ":echo 'nvimrc reloaded'"<CR>

" Update name of buffer to filename
autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
set title
set exrc
set secure

" Don't highlight current line
set nocursorline

" Set relative number line
set number
set relativenumber

" Fix fish issues
set shell=sh
set path=$PWD/**

" Don't create swap files
set noswapfile

" Setup indent
filetype plugin indent on

" Spaces and tabs
set tabstop=2
set softtabstop=2
set backspace=2
set shiftwidth=2
set fileformat=unix

" reindent file
map <leader>i mzgg=G`z<CR>

" Tab through buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprev<CR>

" Up/down
noremap <Space> <C-d>
noremap <C-Space> <C-u>

" Easier split switches
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

vnoremap p "_dP
nnoremap <D-c> "+y
nnoremap <D-v> "+p
tnoremap <Esc> <C-\><C-n>

" More natural splits
set splitbelow          " Horizontal split below current.
set splitright          " Vertical split to right of current.

" Enable gitgutter
let g:gitgutter_enabled = 1
let g:gitgutter_async = 0

" Airline setup
let g:airline_enable_hunks = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
set laststatus=2
let g:airline_theme='one'

" NEARTree
let g:nerdtree_tabs_open_on_console_startup=1
let NERDTreeRespectWildIgnore=1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeIgnore = ['^\.DS_Store$', '^tags$', '\.git$[[dir]]', '\.idea$[[dir]]', '\.sass-cache$']

" Tabular
let g:haskell_tabular = 1
vmap a= :Tabularize /=<CR>
vmap a; :Tabularize /::<CR>
vmap a- :Tabularize /-><CR>
vmap a* :Tabularize /<\*><CR>

" Denite
call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts', ['--hidden', '--vimgrep', '--heading', '-S'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
call denite#custom#var('buffer', 'date_format', '')

let s:denite_options = {'default' : {
\ 'auto_resize': 1,
\ 'prompt': 'Î»:',
\ 'direction': 'rightbelow',
\ 'winminheight': '10',
\ 'highlight_mode_insert': 'Visual',
\ 'highlight_mode_normal': 'Visual',
\ 'prompt_highlight': 'Function',
\ 'highlight_matched_char': 'Function',
\ 'highlight_matched_range': 'Normal'
\ }}

function! s:profile(opts) abort
  for l:fname in keys(a:opts)
    for l:dopt in keys(a:opts[l:fname])
      call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
    endfor
  endfor
endfunction

call s:profile(s:denite_options)

nmap ' :Denite buffer -split=floating -winrow=1<CR>
nmap ; :Denite file/rec -split=floating -winrow=1<CR>
nnoremap \ :<C-u>Denite grep:. -no-empty -mode=normal<CR>
nnoremap <leader>\ :<C-u>DeniteCursorWord grep:. -mode=normal<CR>

" Set root dir for non-projects, Rooter plugin
let g:rooter_change_directory_for_non_project_files = 'current'

" Fix problem with auto-close and esc
let g:AutoClosePumvisible = {"ENTER": "", "ESC": ""}

" Color scheme
colorscheme one
set background=dark

if $ITERM_PROFILE =~ "light"
  set background=light
endif

" Coc
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
nnoremap <silent> K :call <SID>show_documentation()<CR>
nmap <silent> <leader>dd <Plug>(coc-definition)
nmap <silent> <leader>dr <Plug>(coc-references)
nmap <silent> <leader>dj <Plug>(coc-implementation)
command! -nargs=0 Prettier :CocCommand prettier.formatFile
vmap <leader>F  <Plug>(coc-format-selected)
nmap <leader>F  <Plug>(coc-format-selected)

set cmdheight=2

" Hard time always on
let g:hardtime_default_on = 1

if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif
